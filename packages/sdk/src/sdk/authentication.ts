/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { authenticationLogin } from "../funcs/authenticationLogin.js";
import { authenticationVerify } from "../funcs/authenticationVerify.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Authentication extends ClientSDK {
  /**
   * Login with email
   *
   * @remarks
   * Request a new login for a user to get a token. This will respond with a verification token and send an email to confirm the request. Once confirmed you can use the verification token to get an authentication token.
   */
  async login(
    request?: operations.EmailLoginRequestBody | undefined,
    options?: RequestOptions,
  ): Promise<operations.EmailLoginResponseBody> {
    return unwrapAsync(authenticationLogin(
      this,
      request,
      options,
    ));
  }

  /**
   * Verify a login request to get an authentication token
   *
   * @remarks
   * Verify the user accepted the login request and get a authentication token. The user email address and the token received after requesting the login must be added to the URL as a query string with the names `email` and `token`.
   */
  async verify(
    request: operations.VerifyTokenRequest,
    options?: RequestOptions,
  ): Promise<operations.VerifyTokenResponseBody> {
    return unwrapAsync(authenticationVerify(
      this,
      request,
      options,
    ));
  }
}
